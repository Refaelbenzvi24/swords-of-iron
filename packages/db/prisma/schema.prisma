// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Source {
    id        String   @id @default(cuid())
    name      String   @unique
    url       String   @unique
    weapons   Weapon[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Weapon {
    id        String   @id @default(cuid())
    sourceId  String
    name      String
    url       String   @unique
    skins     Skin[]
    source    Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SkinQuality {
    id        String   @id @default(cuid())
    name      String   @unique
    skins     Skin[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Skin {
    id        String      @id @default(cuid())
    weaponId  String
    qualityId String
    skinData  SkinData[]
    quality   SkinQuality @relation(fields: [qualityId], references: [id], onDelete: Cascade)
    weapon    Weapon      @relation(fields: [weaponId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@unique([weaponId, qualityId])
}

model SkinData {
    id               String   @id @default(cuid())
    skinId           String
    steamPrice       Float
    steamListings    Int
    steamVolume      Int
    steamMedianPrice Float
    bitSkinsPrice    Float
    percentChange    Float
    skin             Skin     @relation(fields: [skinId], references: [id], onDelete: Cascade)
    createdAt        DateTime @default(now())

    @@unique([skinId, createdAt])
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
